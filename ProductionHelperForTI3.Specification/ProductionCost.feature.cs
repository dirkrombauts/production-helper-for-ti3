// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProductionHelperForTI3.Specification
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Production Cost")]
    public partial class ProductionCostFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProductionCost.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Production Cost", "  In order not to produce more units than I can afford\r\n  I want to see how much " +
                    "the units I am building cost", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Production Costs per Unit Type")]
        [NUnit.Framework.TestCaseAttribute("2", "Ground Forces", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Mechanized Unit", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1", "PDS", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Space Dock", "4", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Fighters", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Destroyer", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Cruiser", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Carrier", "3", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Dreadnought", "5", null)]
        [NUnit.Framework.TestCaseAttribute("1", "War Sun", "12", null)]
        public virtual void ProductionCostsPerUnitType(string amount, string unitType, string cost, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Production Costs per Unit Type", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 7
    testRunner.When(string.Format("I produce \'{0}\' \'{1}\'", amount, unitType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
    testRunner.Then(string.Format("I have to pay \'{0}\' resource(s)", cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Production Cost of a Single Ground Force is still 1")]
        public virtual void TheProductionCostOfASingleGroundForceIsStill1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Production Cost of a Single Ground Force is still 1", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 30
    testRunner.When("I produce \'1\' \'Ground Force\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
    testRunner.Then("I have to pay \'1\' resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Production Cost of a Single Fighter is still 1")]
        public virtual void TheProductionCostOfASingleFighterIsStill1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Production Cost of a Single Fighter is still 1", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 40
    testRunner.When("I produce \'1\' \'Fighter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
    testRunner.Then("I have to pay \'1\' resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Sarween Tools Technology reduces the Production Costs by 1")]
        [NUnit.Framework.TestCaseAttribute("2", "Ground Forces", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Mechanized Unit", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "PDS", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Space Dock", "3", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Fighters", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Destroyer", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Cruiser", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Carrier", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Dreadnought", "4", null)]
        [NUnit.Framework.TestCaseAttribute("1", "War Sun", "11", null)]
        public virtual void TheSarweenToolsTechnologyReducesTheProductionCostsBy1(string amount, string unitType, string cost, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Sarween Tools Technology reduces the Production Costs by 1", exampleTags);
#line 43
this.ScenarioSetup(scenarioInfo);
#line 45
    testRunner.Given("I have the \'Sarween Tools\' Technology", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
    testRunner.When(string.Format("I produce \'{0}\' \'{1}\'", amount, unitType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
    testRunner.Then(string.Format("I have to pay \'{0}\' resource(s)", cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Combined Production Sums the Costs")]
        public virtual void CombinedProductionSumsTheCosts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Combined Production Sums the Costs", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 65
    testRunner.Given("I have the \'Sarween Tools\' Technology", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
    testRunner.When("I produce \'1\' \'War Sun\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
    testRunner.And("I produce \'10\' \'Ground Forces\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
    testRunner.And("I produce \'2\' \'Mechanized Units\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
    testRunner.And("I produce \'12\' \'Fighters\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
    testRunner.And("I produce \'2\' \'Carriers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
    testRunner.Then("I have to pay \'32\' resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The L1z1x Mindnet pays only 4 resources for a Dreadnought")]
        public virtual void TheL1Z1XMindnetPaysOnly4ResourcesForADreadnought()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The L1z1x Mindnet pays only 4 resources for a Dreadnought", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 76
    testRunner.Given("my Race is the \'L1z1x Mindnet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
    testRunner.When("I produce \'1\' \'Dreadnought\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
    testRunner.Then("I have to pay \'4\' resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
